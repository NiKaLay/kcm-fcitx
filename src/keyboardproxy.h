/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -p keyboardproxy -c KeyboardProxy org.fcitx.Fcitx.Keyboard.xml -i layout.h
 *
 * qdbusxml2cpp is Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KEYBOARDPROXY_H_1344587527
#define KEYBOARDPROXY_H_1344587527

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "layout.h"

namespace Fcitx {

/*
 * Proxy class for interface org.fcitx.Fcitx.Keyboard
 */
class KeyboardProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.fcitx.Fcitx.Keyboard"; }

public:
    KeyboardProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~KeyboardProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString, QString> GetLayoutForIM(const QString &im)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(im);
        return asyncCallWithArgumentList(QLatin1String("GetLayoutForIM"), argumentList);
    }
    inline QDBusReply<QString> GetLayoutForIM(const QString &im, QString &variant)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(im);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("GetLayoutForIM"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            variant = qdbus_cast<QString>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<Fcitx::LayoutList> GetLayouts()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetLayouts"), argumentList);
    }

    inline QDBusPendingReply<> SetLayoutForIM(const QString &im, const QString &layout, const QString &variant)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(im) << QVariant::fromValue(layout) << QVariant::fromValue(variant);
        return asyncCallWithArgumentList(QLatin1String("SetLayoutForIM"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

}

#endif
